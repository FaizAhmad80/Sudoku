{"version":3,"sources":["ui/Tile.js","ui/Board.js","ui/Interface.js","services/api.js","Sudoku.js","App.js","index.js"],"names":["Tile","_ref","puzzle","grid","handleChange","map","row","rowIndex","col","colIndex","_jsx","className","concat","value","type","onChange","e","Board","children","Interface","handleInterface","status","_jsxs","readOnly","onClick","apiUrl","REST","fetch","data","board","method","headers","body","JSON","stringify","getGrid","i","Array","fill","copy2DArray","from","to","length","Sudoku","setGrid","useState","puzzleStatus","setPuzzleStatus","initialGrid","useRef","current","target","test","Number","newGrid","async","action","response","json","game","error","console","log","handleCreate","solution","handleSolve","handleValidate","Error","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ec6e1ac.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Tile({ puzzle, grid, handleChange }) {\n  return grid.map((row, rowIndex) => {\n    return row.map((col, colIndex) => {\n      return (\n        <input\n        className={`${puzzle[rowIndex][colIndex] !== 0\n          ? \"initial\"\n          : col !== 0\n          ? \"tile taken\"\n          : \"tile\"} \n          ${\n           colIndex%3 ===0 \n           ?\"box-left\"\n           : \"\"\n          }\n          ${\n            rowIndex%3 ===0 \n            ?\"box-up\"\n            : \"\"\n          }\n       `}\n          // className={\n          //   puzzle[rowIndex][colIndex] !== 0\n          //     ? \"initial\"\n          //     : col !== 0\n          //     ? \"tile taken\"\n          //     : \"tile\"\n          // }\n          value={col === 0 ? \"\" : col}\n          key={rowIndex + \" \" + colIndex}\n          type=\"text\"\n          onChange={(e) => handleChange(rowIndex, colIndex, e)}\n        />\n      );\n    });\n  });\n}\n\nexport default Tile;\n\n","import React from \"react\";\nimport Tile from \"./Tile\";\n\nfunction Board({ puzzle, grid, handleChange }) {\n  return (\n    <div className=\"board\">\n      <Tile puzzle={puzzle} grid={grid} handleChange={handleChange} />\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\n\nfunction Interface({ handleInterface, status }) {\n  return (\n    <div className=\"interface\">\n      <div className=\"info-interface\">\n        <input readOnly value={status}></input>\n      </div>\n      <div className=\"action-interface\">\n        <button\n          className=\"generator-btn btn\"\n          onClick={() => {\n            handleInterface(\"create\");\n          }}\n        >\n          Create\n        </button>\n        <button\n          className=\"validate-btn btn\"\n          onClick={() => {\n            handleInterface(\"validate\");\n          }}\n        >\n          Validate\n        </button>\n        <button\n          className=\"solve-btn btn\"\n          onClick={() => {\n            handleInterface(\"solve\");\n          }}\n        >\n          Solve\n        </button>\n        <button\n          className=\"clear-btn btn\"\n          onClick={() => {\n            handleInterface(\"clear\");\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Interface;\n","const apiUrl = 'https://sudoku-game-server.vercel.app';\nexport const REST = {\n  getBoard: function () {\n    return fetch(`${apiUrl}/api/puzzle`);\n  },\n  solveBoard: function (grid) {\n    const data = {\n      board: grid,\n    };\n    return fetch(`${apiUrl}/api/solve`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  },\n  validateBoard: function (grid) {\n    const data = {\n      board: grid,\n    };\n    return fetch(`${apiUrl}/api/validate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  },\n};\n\n// export const REST = {\n//   getBoard: function () {\n//     return fetch(`${apiUrl}/puzzle`);\n//   },\n//   solveBoard: function (grid) {\n//     const data = {\n//       board: grid,\n//     };\n//     return fetch(`${apiUrl}/solve`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     });\n//   },\n//   validateBoard: function (grid) {\n//     const data = {\n//       board: grid,\n//     };\n//     return fetch(`${apiUrl}/validate`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     });\n//   },\n// };\n","import \"./App.css\";\nimport React, { useState, useRef } from \"react\";\nimport Board from \"./ui/Board\";\nimport Interface from \"./ui/Interface\";\nimport { REST } from \"./services/api.js\";\n\nfunction getGrid() {\n  const grid = [];\n  for (let i = 0; i < 9; i++) {\n    grid[i] = Array(9).fill(0);\n  }\n  return grid;\n}\n\nfunction copy2DArray(from, to) {\n  for (let i = 0; i < from.length; i++) {\n    to[i] = [...from[i]];\n  }\n}\n\nfunction Sudoku() {\n  const [grid, setGrid] = useState(getGrid);\n  const [puzzleStatus, setPuzzleStatus] = useState(\"** UNSOLVED **\");\n  const initialGrid = useRef(getGrid());\n\n  function handleChange(row, col, e) {\n    const re = /^[1-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      if (Number(e.target.value) < 10 && initialGrid.current[row][col] === 0) {\n        const newGrid = [...grid];\n        newGrid[row][col] = Number(e.target.value);\n        setGrid(newGrid);\n      }\n    }\n  }\n\n  async function handleInterface(action) {\n    let newGrid;\n    switch (action) {\n      case \"create\":\n        newGrid = await handleCreate();\n        copy2DArray(newGrid, initialGrid.current);\n        setPuzzleStatus(\"\");\n        setGrid(newGrid);\n        break;\n      case \"solve\":\n        newGrid = await handleSolve();\n        setGrid(newGrid);\n        break;\n      case \"clear\":\n        newGrid = getGrid();\n        copy2DArray(newGrid, initialGrid.current);\n        setGrid(newGrid);\n        setPuzzleStatus(\"\");\n        break;\n      case \"validate\":\n        const status = await handleValidate();\n        const puzzStats = status ? \"** SOLVABLE **\" : \"** UNSOLVABLE **\";\n        setPuzzleStatus(puzzStats);\n        break;\n      default:\n        throw new Error(\"Invalid action\");\n    }\n  }\n\n  async function handleCreate() {\n    try {\n      const response = await REST.getBoard();\n      const data = await response.json();\n      return data.game;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleValidate() {\n    try {\n      const response = await REST.validateBoard(grid);\n      const data = await response.json();\n      return data.status;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function handleSolve() {\n    try {\n      const response = await REST.solveBoard(grid);\n      const data = await response.json();\n      if (data.status) {\n        setPuzzleStatus(\"** SOLVED **\");\n        return data.solution;\n      } else {\n        setPuzzleStatus(\"** UNSOLVABLE **\");\n        return grid;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className=\"Sudoku\">\n      <Board\n        puzzle={initialGrid.current}\n        grid={grid}\n        handleChange={handleChange}\n      />\n      <Interface handleInterface={handleInterface} status={puzzleStatus} />\n    </div>\n  );\n}\n\nexport default Sudoku;\n","import \"./App.css\";\nimport React from \"react\";\nimport Sudoku from \"./Sudoku\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}